{
  "name": "hogan.js",
  "description": "A mustache compiler.",
  "version": "3.0.0",
  "keywords": [
    "mustache",
    "template"
  ],
  "main": "./lib/hogan.js",
  "homepage": "http://twitter.github.com/hogan.js/",
  "author": {
    "name": "Twitter Inc."
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/twitter/hogan.js.git"
  },
  "licenses": [
    {
      "type": "Apache-2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "dependencies": {
    "nopt": "1.0.10",
    "mkdirp": "0.3.0"
  },
  "devDependencies": {
    "uglify-js": "1.x",
    "jsdom": "0.3.4",
    "step": "0.0.5",
    "rimraf": "2.0.1"
  },
  "bin": {
    "hulk": "./bin/hulk"
  },
  "readme": "## Hogan.js - A mustache compiler. [![Build Status](https://secure.travis-ci.org/twitter/hogan.js.png)](http://travis-ci.org/twitter/hogan.js)\r\n\r\n[Hogan.js](http://twitter.github.com/hogan.js/) is a compiler for the\r\n[Mustache](http://mustache.github.com/) templating language. For information\r\non Mustache, see the [manpage](http://mustache.github.com/mustache.5.html) and\r\nthe [spec](https://github.com/mustache/spec).\r\n\r\n## Basics\r\n\r\nHogan compiles templates to HoganTemplate objects, which have a render method.\r\n\r\n```js\r\nvar data = {\r\n  screenName: \"dhg\",\r\n};\r\n\r\nvar template = Hogan.compile(\"Follow @{{screenName}}.\");\r\nvar output = template.render(data);\r\n\r\n// prints \"Follow @dhg.\"\r\nconsole.log(output);\r\n```\r\n\r\n## Features\r\n\r\nHogan is fast--try it on your workload.\r\n\r\nHogan has separate scanning, parsing and code generation phases. This way it's\r\npossible to add new features without touching the scanner at all, and many\r\ndifferent code generation techniques can be tried without changing the parser.\r\n\r\nHogan exposes scan and parse methods. These can be useful for\r\npre-processing templates on the server.\r\n\r\n```js\r\nvar text = \"{{^check}}{{#i18n}}No{{/i18n}}{{/check}}\";\r\ntext +=  \"{{#check}}{{#i18n}}Yes{{/i18n}}{{/check}}\";\r\nvar tree = Hogan.parse(Hogan.scan(text));\r\n\r\n// outputs \"# check\"\r\nconsole.log(tree[0].tag + \" \" + tree[0].name);\r\n\r\n// outputs \"Yes\"\r\nconsole.log(tree[1].nodes[0].nodes[0]);\r\n```\r\n\r\nIt's also possible to use HoganTemplate objects without the Hogan compiler\r\npresent. That means you can pre-compile your templates on the server, and\r\navoid shipping the compiler. However, the optional lambda features from the\r\nMustache spec require the compiler and the original template source to be present.\r\n\r\n## Why Hogan.js?\r\n\r\nWhy another templating library?\r\n\r\nHogan.js was written to meet three templating library requirements: good\r\nperformance, standalone template objects, and a parser API.\r\n\r\n## Install\r\n\r\n# Node.js\r\n\r\n```\r\nnpm install hogan.js\r\n```\r\n\r\n# component\r\n\r\n```\r\ncomponent install twitter/hogan.js\r\n```\r\n\r\n## Compilation options\r\n\r\nThe second argument to Hogan.compile is an options hash.\r\n\r\n```js\r\nvar text = \"my <%example%> template.\"\r\nHogan.compile(text, {delimiters: '<% %>'});\r\n```\r\n\r\nThere are currently four valid options.\r\n\r\nasString: return the compiled template as a string. This feature is used\r\nby hulk to produce strings containing pre-compiled templates.\r\n\r\nsectionTags: allow custom tags that require opening and closing tags, and\r\ntreat them as though they were section tags.\r\n\r\n```js\r\nvar text = \"my {{_foo}}example{{/foo}} template.\"\r\nHogan.compile(text, { sectionTags: [{o: '_foo', c: 'foo'}]});\r\n```\r\n\r\nThe value is an array of object with o and c fields that indicate names\r\nfor custom section tags. The example above allows parsing of {{_foo}}{{/foo}}.\r\n\r\ndelimiters: A string that overrides the default delimiters. Example: \"<% %>\".\r\n\r\ndisableLambda: disables the higher-order sections / lambda-replace features of Mustache.\r\n\r\n## Issues\r\n\r\nHave a bug? Please create an issue here on GitHub!\r\n\r\nhttps://github.com/twitter/hogan.js/issues\r\n\r\n## Versioning\r\n\r\nFor transparency and insight into our release cycle, releases will be numbered with the follow format:\r\n\r\n`<major>.<minor>.<patch>`\r\n\r\nAnd constructed with the following guidelines:\r\n\r\n* Breaking backwards compatibility bumps the major\r\n* New additions without breaking backwards compatibility bumps the minor\r\n* Bug fixes and misc changes bump the patch\r\n\r\nFor more information on semantic versioning, please visit http://semver.org/.\r\n\r\n## Testing\r\n\r\nTo run the tests you first need to update all git submodules.\r\n\r\n    $ git submodule init\r\n    $ git submodule update\r\n\r\nUnit tests are written using [QUnit](http://qunitjs.com/). To run them, open `test/index.html`\r\nin a browser.\r\n\r\nUse [node](http://nodejs.org/) to run all tests from the\r\n[mustache spec](https://github.com/mustache/spec).\r\n\r\n    $ node test/spec.js\r\n\r\n## Authors\r\n\r\n**Robert Sayre**\r\n\r\n+ http://github.com/sayrer\r\n\r\n**Jacob Thornton**\r\n\r\n+ http://github.com/fat\r\n\r\n## License\r\n\r\nCopyright 2011 Twitter, Inc.\r\n\r\nLicensed under the Apache License, Version 2.0: http://www.apache.org/licenses/LICENSE-2.0\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/twitter/hogan.js/issues"
  },
  "_id": "hogan.js@3.0.0",
  "dist": {
    "shasum": "4c56068398dd4435d85ab63902afd29ddd56a8cb"
  },
  "_resolved": "git://github.com/twitter/hogan.js.git#d31882834c8819b8e42076badba43b37fdf90651",
  "_from": "hogan.js@git://github.com/twitter/hogan.js.git"
}
